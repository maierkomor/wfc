/*
 *  Copyright (C) 2017-2018, Thomas Maier-Komor
 *
 *  This source file belongs to Wire-Format-Compiler.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "sysconfig.h"


/* wfc-template:
 * function:write_varint
 */
int write_varint_generic(uint8_t *wire, ssize_t wl, varint_t v)
{
	uint8_t *w = wire;
	do {
		if (--wl < 0)
			$handle_error;
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
	} while (v);
	return wire-w;
}


/* wfc-template:
 * function:write_varint
 * ErrorHandling:cancel
 */
int write_varint_cancel(uint8_t *wire, ssize_t wl, varint_t v)
{
	uint8_t *w = wire;
	do {
		if (--wl < 0)
			$handle_error;
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
	} while (v);
	return wire-w;
}


/* wfc-template:
 * function:write_varint
 * ErrorHandling:none
 */
int write_varint_noerr0(uint8_t *wire, ssize_t wl, varint_t v)
{
	uint8_t *w = wire;
	do {
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
	} while (v);
	return wire-w;
}


/* wfc-template:
 * function:write_varint
 * ErrorHandling:none
 */
int write_varint_noerr1(uint8_t *wire, ssize_t wl, varint_t v)
{
	int n = 0;
	do {
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
		++n;
	} while (v);
	return n;
}


/* wfc-template:
 * function:write_varint
 * ErrorHandling:assert
 */
int write_varint_0(uint8_t *wire, ssize_t wl, varint_t v)
{
	int n = 0;
	do {
		assert(wl > 0);
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
		--wl;
		++n;
	} while (v && wl);
	assert(v == 0);
	return n;
}

/* wfc-template:
 * function:write_varint
 * ErrorHandling:assert
 */
int write_varint_1(uint8_t *wire, ssize_t wl, varint_t v)
{
	uint8_t *w = wire, *e = wire + wl;
	do {
		assert(wire < e);
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
	} while (v);
	return wire-w;
}


/* wfc-template:
 * function:write_varint
 * ErrorHandling:assert
 */
int write_varint_2(uint8_t *wire, ssize_t wl, varint_t v)
{
	uint8_t *w = wire;
	do {
		assert(--wl >= 0);
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
	} while (v);
	return wire-w;
}


/* wfc-template:
 * function:write_varint
 * ErrorHandling:assert
 */
int write_varint_3(uint8_t *wire, ssize_t wl, varint_t v)
{
	int n = 0;
	while ((wl > 0) && (v != 0)) {
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
		--wl;
		++n;
	}
	assert(v == 0);
	return n;
}

/*
int write_varint_eptr_0(uint8_t *wire, uint8_t *e, varint_t v)
{
	uint8_t *w = wire;
	do {
		assert(w < e);
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*w++ = u8;
	} while (v);
	return w-wire;
}

int write_varint_eptr_1(uint8_t *wire, uint8_t *e, varint_t v)
{
	int s = e-wire;
	uint8_t *w = wire;
	do {
		assert(--s >= 0);
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*w++ = u8;
	} while (v);
	return w-wire;
}
*/

/* no-wfc-template:
 * function: write_varint
int write_varint_0($putparam, varint_t v)
{
	int n = 0;
	do {
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		$wireput(u8);
		++n;
	} while (v);
	return n;
}


int write_varint(uint8_t *wire, ssize_t wl, varint_t v)
{
	uint8_t *w = wire;
	do {
		if (--wl < 0)
			$handle_error;
		uint8_t u8 = v & 0x7f;
		v >>= 7;
		if (v)
			u8 |= 0x80;
		*wire = u8;
		++wire;
	} while (v);
	return wire-w;
}
 */
