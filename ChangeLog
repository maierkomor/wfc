Release R2304:
==============
- enhanced base-class support
- enhancement: reduced cases of superfluous function definitions
- enhancement: default should have priority over unset
- fix: wfc keywords must be usable as identifiers in compatibility mode
- minor code optimizations
- bugfixes

Release R2211:
==============
- fixes for sign-extended wire-format
- support setByName array element addition with argument
- fix regressions/bugs in ASCII output
- reduce cases of defined but not used warnings
- testsuite updates

Release R2206:
==============
- enhancement: range check for field options 'unset','default'
- ASCII output fixes

Release R2109:
==============
- enhancement: prefer default contructors and clear method over empty
  string assignments
- enhancement: optimized placement functions for varint32 and varint16
- enhancement: added option padded_message_size
 
Release R2108:
==============
- fix: mutable element access must init with default value
- fix: comments flag was mostly ignored
- fix: inconsitency related to validbits
- enhancement: suppress superflous "signed n"
- enhancement: comment updates for doxygen

Release R2106:
==============
- fix: target must be applied before generating standalone lib
- fix: member size sorting may lose members
- fix: false marshalling for uint8/int8
- enhancement: optimizations for toJSON and toASCII

Release R2104:
==============
- enhancement: encode/decode functions for custom string types
- fix: invalid generation of set(const char*) for repeated strings
- fix: fix indention issue for JSON

Release R2103:
==============
- enhancement: further size optimization
- enhancement: make use of c++11 syntax
- fix: array.h has buggy end()
- fix: erroneous control flow in setByName without valid bit

Release R2102:
==============
- fix: potential bus error with write_u64 on little endian
- fix: do not set valid flag when parsing ascii fails
- fix: stringtype handling may fallback to C type
- fix: multiple options handling
- fix: return type must be ssize_t if function returns <0
- fix: build fixes for examples
- enhancement: support for setting bytes with hex encoded data
- enhancement: updated syscfg example to demo setByName
- enhancement: added doxygen comments to the generated files
- enhancement: opimization for use of empty string as invalid value

Release R2101:
==============
- enhancement: support option used for messages
- fix: obsolete field handling with early decoding
- fix: yacc deprecation warning

Release R2012:
==============
- fix: usage=obsolete produces uncompilable code
- fix: resolved compile issues related to array.h

Release R2011:
==============
- enhancement: AString should be suitable for bytes type
- enhancement: array needs emplace_back
- enhancement: per default operator == and operator != generation
- enhancement: support eraseing repeated elements via setByName
- fix: astring.h compile error
- fix: AString needs push_back(char)
- fix: FString needs some fixes
- fix: array should only use memmove/memcmp for PODs
- fix: putparam should respect stringtype
- fix: setByName(f,0) does not clear valid bit
- fix: JSON output of unknown enums should be formated as integer

Release R2007:
==============
- enhancement: code optimization for ASCII output
- enhancement: better protection against corrupt data
- fix: potential stack corruption in JSON bytes output
- fix: remove superfluous check (ud.vi < 0)

Release R2005:
==============
- enhancement: added option to en-/disable use of ID 0
- enhancement: WFC should exit with EXIT_FAILURE on all errors
- enhancement: JSON and ASCII of unkown enums as decimal integer
- enhancement: parsing of enum values in setByValue
- enhancement: reduced JSON code size
- enhancement: updated early decoding and moved from beta to stable
- fix: several fixes related to JSON output generation
- fix: added missing boundary check for string assignment
- enhancement: JSON validation integrated in test-suite
- buildenv: updated autoconf scripts, check that xxd is available
- porting: update for Cygwin

Release R2003:
==============
- enhancement: added option to set field ascii parsing function
- enhancement: ascii output should include unset fields
- enhancement: clear() should reset the member to the default value
- enhancement: support to clear field with setByName(value = 0)
- enhancement: support to add element with setByName("element[+]",...)
- fix: assertion failure with multiple field options
- fix: field options clear and unset must play together
- fix: static storage initialization broken

Release R2002:
==============
- enhancement: getMaxSize returns SIZE_MAX if size is unlimited
- enhancement: output custom declarations to .cpp
- enhancement: support for custom JSON value generation
- enhancement: storage type specification
- enhancement: repeated types should have a const& get
- enhancement: added concept for reserving ids
- enhancement: set value by name from ASCII (restrictions see man page)
- enhancement: removed dependency to wfc_support.* for ASCII output
- enhancement: added support for custom template functions
- documentation updates (ongoing)
- fix: unset value should be used as default, if default is not set
- fix JSON output for 8 bit integers
- fix related to subclass naming
- fixes and updates for alternate stringtypes

Release R2001:
==============
- enhancement: optimized JSON generation code
- enhancement: added fixed size string header and usage example
- updated incomplete astring.h
- updated example syscfg
- documentation updates (still incomplete)
- added new examples and updated existing ones
- minor bugfixes

Release R1907:
==============
- enhancement: messages and enums also need keyword safeguards
- enhancement: new member sortings: name, type, unsorted
- fix: omit operator declaration for ==, !=, if suppressed
- POSIX compliant options parsing to support Solaris and *BSD
- added man-page

Release R1905:
==============
- fix: generated code with fixed8/fixed16 may not compile
- fix: invalid handing of int8 in some cases
- fix: remove superfluous duplicate parenthesis
- enhancement: use emplace_back instead of resize
- enhancement: safeguard identifiers against conflicts with keywords
- change: disable Sink support per default to avoid include dependency

Release R1902:
==============
- first public release
- use option -h to query available options


Versions below are unpublished prior releases that were used for hostscope and
other private projects.

Version 0.6.0:
==============
- added null/ff termination support

Version 0.5.0:
==============
- added JSON generation
- added XML generation
- added support for invalid value based has_ methods
- added option to return referene instead pointer from mutables
- enhanced error messages of parser
- enhanced code template infrastructure

Version 0.4.0:
==============
- integrated code library
- optimization and fixes

Version 0.3.0:
==============
- baseline for first hostscope release with wfc code

Version 0.2.0:
==============
- lots of fixes, changes, and enhancements

Version 0.1.0:
==============
- initial version
