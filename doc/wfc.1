.TH "wfc" "1" "R1906" "Thomas Maier-Komor" "console utility"
.SH "NAME"
WFC \- wire format compiler
.SH "SYNTAX"
.LP 
wfc [\fIoptions\fP] <file>
.SH "DESCRIPTION"
.LP 
WFC translates protocol descriptions to C++ source files. The generated
header files provide class descriptions for serializing and
deserializing data accoring to the protocol description.

WFC syntax has been derived from protocol buffers, but provides
optimizations for embedded systems.
.SH "OPTIONS"
.LP 
\fB\-i\fR <\fIfilename\fP>
Use \fIfilename\fP as input instead of the standard input (needs to be
given for multi volume support). If \fIfilename\fP is \-, input is read
from standard input.
.br
\fB\-m\fR <\fImessage\fP>
Generate code starting with message \fImessage\fP. Depending messages
will be generated if necessary.
.br
\fB\-t\fR <\fItarget\fP>
Use option set \fItarget\fP as specified in the source file to generate
the code.
.br
\fB\-o\fR <\fIout_name\fP>
Generate files named \fIout_name\fP.cpp and \fout_name\fP.h.
.br
\fB\-l\fR
Genrate wfc library only. This is useful if you want to share the
library among multiple source files.
.br
\fB\-v\fR
Operate in verbose mode.
.br
\fB\-s\fR
Generate subclasses instead of mangled class names.
.br
.SH "OPTIONS AND DEFAULT VALUES"
Following options with associated default values are available. Option names
are case insensitive. for options can be overridden on the command line or in
the .wfc source file.
.br
\fIOptimize\fP: valid values are review, size, speed; default is review
.br
\fIwfclib\fP: valid values are static, inline, extern. Static means generate
shareable functions as static/module local functions. Inline generates the
functions in the header file. Extern forces the use of externally defined
functions. For extern usage, the library can be generated with option \fI-l\fP
(see above).
\fIUnkownField\fP: valid values are assert, skip; default is skip. This option
defines the handling of unkonwn message field tags during parsing. Usually you
want to skip unknown fields.
.br
\fIwfclib\fP: valid values are static, inline, extern; default is static
.br
\fIendian\fP: valid values are unknown, little, big; default is unknown.
Use little endian optimization only for targets that are able to perform
an unaligned access. Big endian and unknown endian are currently implemented
without any difference.
.br
\fIwithEqual\fP: valid values are true, false; default is true. If this
option is enabled the operator == will be generated.
.br
\fIwithUnequal\fP: valid values are true, false; default is true. If this
option is enabled the operator != will be generated.
.br
\fIMutableType\fP: return type of mutable_* member functions. This can be
either a pointer or a reference. Accordingly, the agrument must be either
"pointer" or "reference". Default is "pointer".
.br
\fIErrorHandling\fP: what to do in case of errors that are detected during
reading data. Valid methods are: cancel (i.e. return with an error code),
assert (i.e. call abort), throw (throw an exception).
.br
\fIVarIntBits\fP: Number of bits to use for variable length integer
types. Default is 64, set to 32 or 16 on machines with smaller native
types, if the value range of all fields allows it.
.br
\fIIntSize\fP: default number of bits for data-types unsigned, signed, and int.
.br
\fIheader\fP: include a header file in the generated code. This option
can be used multiple times.
.br
\fIheader\fP: This option can be used multple times and tells wfc to add an
include directive for the specific header file into the generated code. This is
needed if you intend to use custem string types.
.br
\fInamespace\fP: Set the namespace for which the code shall be generated. This
might be necessary, if you want to integrate multiple WFC definitions with
conflicting settings. See wfclib example.
.br
\fItoASCII\fP: name of toASCII method. This is disabled per default, as linking
with wfc_support.cpp is otherwise necessary.
.br
\fIBaseClass\fP: base class for generated message classes.
.br
\fIstreamtype\fP: Set class name to use for output streams. Default is
std::ostream.
.br


.SH "MESSAGE OPTIONS"
\fISortMembers\fP: member variables are sorted according to the given sorting
scheme. Valid arguments are: id (default), name, type, size, unsorted.
.br
\fIinline\fP: Comma separated lists of methods to inline. Defaults
depend on Optimization level. Valid arguments are get, set, has.
.br
\fImembers\fP (BETA): message members can be either 'regular' or 'virtual'.
When members is set to virtual the member variables are accessed via 'virtual
functions and no member variables will be included in the class definition.


.SH "FIELD OPTIONS"
Options that are applicable to elements of messages.
.br
\fIused\fP: valid values are true, false; default is true. If this
option is set to false, no code will be generated for handling this
field.
.br
\fIstringtype\fP: Data type to use for strings. Default is std::string.
Set to "C" to use C string (const char *).
.br
\fIarraysize\fP: Integer value of number of elements to allocate for a
repeated type. If set to 0 (default), a std::vector will be used
instead. Use if maximum number of elements is known, if you want to
avoid impact of std::vector.
.br
\fIstorage\fP (BETA): like option \fImembers\fP this option sets the instantiation
style of the data for the relevant field. I.e. if set to true, all member
functions will be pure virtual, and no data will be instantiated. This
option is limited to the relevant field is set, while in contrast the option
\fImembers\fP at the message level will set the default for all the members of
the message.


.SH "EXAMPLES"
.LP 
To generate header and c++ source files accoring to a wfc protocol
description, just run:
.LP 
wfc <sourcefile>.wfc
.LP 
To generate the code fot a specific target option set, use:
wfc -t target source.wfc
.LP
See the examples subdirectory for complete examples of protocol
descriptions, and option usage.
.LP 
.SH "AUTHORS"
.LP 
Thomas Maier\-Komor <thomas@maier\-komor.de>
.SH "DONATIONS"
.LP
If you like this software, and use it for production purposes in your
company, please consider making a donation to support this work. 
You can donate directly via PayPal to the author's e-mail address
(thomas@maier\-komor.de).
.SH "HOMEPAGE"
.LP
http://www.maier\-komor.de/wfc.html
.SH "LICENSE"
.LP
This software is published under GNU General Public License V3. See file
LICENSE for details.
.SH "SEE ALSO"
.LP 
protoc(1)
